{"version":3,"sources":["components/NavBar.js","components/Person.js","components/People.js","App.js","serviceWorker.js","index.js"],"names":["Nav","styled","div","_templateObject","Logo","h1","_templateObject2","SearchIcon","i","_templateObject3","LocationInput","input","_templateObject4","LanguageSelection","select","_templateObject5","SearchButton","button","_templateObject6","NavBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","parentState","parent","location","radioOption","handleChange","bind","assertThisInitialized","handleSubmit","radioChange","event","setState","target","value","preventDefault","console","log","onChange","react_default","a","createElement","onSubmit","type","id","name","placeholder","className","Radio_default","checked","color","Component","Person","user","infoName","reduced","public_gists","public_repos","followers","following","keys","reduce","b","hireable","email","infoValue","bio","href","html_url","login","USERS_AT_LOCATION_QUERY","gql","People_templateObject","PeopleList","People_templateObject2","LoaderComponent","People_templateObject3","People","Fragment","react_apollo_esm","query","variables","locationInput","sortBy","_ref","loading","error","data","react_spinners","sizeUnit","queryData","map","components_Person","key","Main","App_templateObject","client","ApolloClient","uri","App","navBarInputChange","components_NavBar","components_People","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f6d0f35.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Radio from '@material-ui/core/Radio';\r\n\r\nconst Nav = styled.div`\r\n    display: flex;\r\n    flex-direction:row;\r\n    flex-flow: wrap;\r\n    justify-content: flex-end;\r\n    align-items:center;\r\n    background:white;\r\n\r\n    >*:first-child {\r\n        margin-right:auto;\r\n    }\r\n    \r\n    >* {\r\n        margin-right:20px;\r\n    }\r\n\r\n    @media (max-width: 620px) {\r\n        flex-direction: column;\r\n        padding:1rem;\r\n\r\n        >*:first-child {\r\n            margin:0;\r\n        }\r\n    }\r\n`\r\n\r\nconst Logo = styled.h1`\r\n    margin-left:2rem;\r\n`\r\n\r\nconst SearchIcon = styled.i`\r\n    margin-right:2rem;\r\n`\r\n\r\nconst LocationInput = styled.input`\r\n    padding: 12px 20px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n    box-sizing: border-box;\r\n    @media (max-width: 620px) {\r\n        width: 100%;\r\n    }\r\n`\r\n\r\nconst LanguageSelection = styled.select`\r\n    padding: 12px 20px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n    box-sizing: border-box;\r\n    @media (max-width: 620px) {\r\n        width: 100%;\r\n    }\r\n`\r\n\r\nconst SearchButton = styled.button`\r\n    background:none;\r\n    border:none;\r\n    @media (max-width: 620px) {\r\n        background: darkgray;\r\n        border-radius:4px;\r\n        width: 100%;\r\n        height: 3rem;\r\n    }\r\n`\r\nclass NavBar extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            parentState: props.parent,\r\n            location: '',\r\n            radioOption: 'followers'\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.radioChange = this.radioChange.bind(this)\r\n    }\r\n\r\n\r\n    handleChange(event) {\r\n        this.setState({ location: event.target.value });\r\n    }\r\n\r\n    /**\r\n     * Handles the form submission\r\n     */\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        console.log('submitted')\r\n        console.log(this.state.radioOption)\r\n        this.props.onChange(this.state.location, this.state.radioOption)\r\n    }\r\n\r\n\r\n    radioChange(event) {\r\n        console.log(this.state.radioOption)\r\n        this.setState({ radioOption: event.target.value });\r\n        console.log(this.state.radioOption)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <Nav>\r\n                    <Logo>GitScout</Logo>\r\n\r\n                    <p>Filter by:</p>\r\n                    <LocationInput type=\"text\" id=\"location\" name=\"location\" placeholder=\"Wellington\" value={this.state.location} onChange={this.handleChange} />\r\n\r\n\r\n                    <LanguageSelection>\r\n                        <option value=\"java\">Java</option>\r\n                        <option value=\"javascript\">JavaScript</option>\r\n                        <option value=\"python\">Python</option>\r\n                    </LanguageSelection>\r\n\r\n                    <div className=\"radioGroup\">\r\n                        <Radio\r\n                            checked={this.state.radioOption === 'followers'}\r\n                            onChange={this.radioChange}\r\n                            color=\"default\"\r\n                            value=\"followers\"\r\n                            name=\"sortby\"\r\n                        />Followers\r\n                     <Radio\r\n                            checked={this.state.radioOption === 'repositories'}\r\n                            onChange={this.radioChange}\r\n                            color=\"default\"\r\n                            value=\"repositories\"\r\n                            name=\"sortby\"\r\n                        />Repositories\r\n                    </div>\r\n\r\n                    <SearchButton type=\"submit\" value=\"Submit\">\r\n                        <SearchIcon button className=\"fas fa-search\"></SearchIcon>\r\n                    </SearchButton>\r\n                </Nav>\r\n            </form >\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from 'react';\r\n\r\n\r\nclass Person extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: props.user\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Responsible for rendering out the info values (Gists, followers, following ...)\r\n     * and applying the approriate class to the highest of them, to style it green.\r\n     * \r\n     * @param {String} infoName - current info we are rendering public_gists,public_repos,followers, following\r\n     * @param {Number} value - corresponding value of info\r\n     */\r\n    infoValue(infoName, value) {\r\n        let user = this.state.user;\r\n        // only interested in info components\r\n        let reduced = {\r\n            public_gists: user.public_gists,\r\n            public_repos: user.public_repos,\r\n            followers: user.followers,\r\n            following: user.following\r\n        }\r\n        let highestInfoName = Object.keys(reduced).reduce((a, b) => reduced[a] > reduced[b] ? a : b);\r\n        if (highestInfoName === infoName) {\r\n            return <h3 className=\"highestValue\">{value}</h3>;\r\n        } else {\r\n            return <h3>{value}</h3>;\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        //hireable or not\r\n        let hireable;\r\n        if (this.state.user.hireable) {\r\n            hireable = <span className=\"hireable\"><p>Hireable</p></span>\r\n        } else {\r\n            hireable = <span className=\"nothireable\"><p>-</p></span>\r\n        }\r\n\r\n        //email\r\n        let email;\r\n        if (this.state.user.email) {\r\n            email = <p>{this.state.user.email}</p>\r\n        } else {\r\n            email = <p>No email found</p>\r\n        }\r\n\r\n        return (\r\n\r\n            <div className=\"personContainer\">\r\n                <div className=\"languages\">\r\n                    <p>JavaScript</p>\r\n                    <p>Node</p>\r\n                    <p>CSS</p>\r\n                </div>\r\n                <div className=\"info\">\r\n                    <div>\r\n                        <p>Gist</p>\r\n                        {\r\n                            this.infoValue('public_gists', this.state.user.public_gists)\r\n                        }\r\n                    </div>\r\n                    <div>\r\n                        <p>Contributions</p>\r\n                        <h3>-</h3>\r\n                    </div>\r\n                    <div>\r\n                        <p>Repos</p>\r\n                        {\r\n                            this.infoValue('public_repos', this.state.user.public_repos)\r\n                        }\r\n                    </div>\r\n                    <div>\r\n                        <p>Following</p>\r\n                        {\r\n                            this.infoValue('following', this.state.user.following)\r\n                        }\r\n                    </div>\r\n                    <div>\r\n                        <p>Followers</p>\r\n                        {\r\n                            this.infoValue('followers', this.state.user.followers)\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"bio\">\r\n                    <p>{this.state.user.bio}</p>\r\n                    {\r\n                        email\r\n                    }\r\n                </div>\r\n                <div className=\"name\">\r\n                    <a href={this.state.html_url}><h4>{this.state.user.name} <span className=\"login\">{this.state.user.login}</span></h4></a>\r\n                    <p className=\"location\">{this.state.user.location}</p>\r\n                    {\r\n                        hireable\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Person;","import React, { Component } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport Person from './Person';\r\nimport styled from 'styled-components';\r\nimport { PulseLoader } from 'react-spinners';\r\n\r\n\r\nconst USERS_AT_LOCATION_QUERY = gql`\r\n  query UsersAtLocationQuery($location: String,$sortBy: String) {\r\n    usersInLocation (location: $location, sortBy: $sortBy) {\r\n      login\r\n      followers\r\n      following\r\n      html_url\r\n      bio\r\n      public_gists\r\n      email\r\n      html_url\r\n      blog\r\n      hireable\r\n      location\r\n      public_repos\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nconst PeopleList = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr 1fr 1fr ;\r\n    grid-gap: 1rem;\r\n    padding:1rem;\r\n\r\n    /* Desktops */\r\n    @media (min-width: 1281px) {\r\n        grid-template-columns: 1fr 1fr 1fr 1fr;\r\n    } \r\n\r\n    /* Laptops, Desktops */\r\n    @media (min-width: 1025px) and (max-width: 1280px) {\r\n        grid-template-columns: 1fr 1fr 1fr;\r\n    } \r\n\r\n    /* Tablets, Ipads (portrait)*/\r\n    @media (min-width: 768px) and (max-width: 1024px) {\r\n        grid-template-columns: 1fr 1fr;\r\n    } \r\n\r\n     /* Tablets, Ipads (portrait)*/\r\n     @media (min-width: 481px) and (max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n    } \r\n\r\n    @media (min-width: 320px) and (max-width: 480px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n    \r\n`\r\n\r\nconst LoaderComponent = styled.div`\r\n    width:100%;\r\n    height:100%;\r\n    margin:1rem;\r\n    position:absolute;\r\n    text-align:center;\r\n`\r\n\r\nclass People extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Query query={USERS_AT_LOCATION_QUERY} variables={{ location: this.props.locationInput, sortBy: this.props.sortBy }}>\r\n                    {({ loading, error, data }) => {\r\n                        if (loading) {\r\n\r\n                            return <LoaderComponent>\r\n                                <PulseLoader\r\n                                    sizeUnit={\"px\"}\r\n                                    color={'#444'}\r\n                                    loading={loading}\r\n                                />\r\n                            </LoaderComponent>;\r\n                        };\r\n                        if (error) console.log(error);\r\n                        console.log(this.props.sortBy)\r\n                        console.log('test waiting for')\r\n                        if(!data) {\r\n                            console.log('fixed')\r\n                            return <PeopleList></PeopleList>\r\n                        }\r\n                        let queryData = data[Object.keys(data)[0]]\r\n                        return (\r\n                            <PeopleList>\r\n\r\n                                {queryData.map(user => (\r\n                                    <Person key={user.id} user={user} />\r\n                                ))}\r\n                            </PeopleList>\r\n                        );\r\n                    }}\r\n                </Query>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default People;","import React, { Component } from 'react';\nimport './App.css';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport styled from 'styled-components';\nimport NavBar from './components/NavBar'\nimport People from './components/People';\n\nconst Main = styled.div`\n  padding:0;\n`\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: \"\",\n      sortBy:\"\"\n    }\n    \n    this.navBarInputChange = this.navBarInputChange.bind(this)\n  }\n\n  /**\n   * Call back function passed to our navbar, to allow us to pass the changed location to our query in\n   * People component.\n   * @param {String} location \n   */\n  navBarInputChange(location,sortBy) {\n    this.setState({\n      location,\n      sortBy\n    })\n    console.log('here1')\n    console.log(this.state)\n  }\n\n  render() {\n    const { location } = this.state\n    return (\n      <ApolloProvider client={client}>\n        <div className=\"App\">\n          <Main>\n            <NavBar parent={location} onChange={this.navBarInputChange} />\n            <People locationInput={this.state.location} sortBy={this.state.sortBy} />\n          </Main>\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}